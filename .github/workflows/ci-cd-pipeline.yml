name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Le pipeline se déclenchera sur les pushs sur la branche main

jobs:
  # Job pour construire l'image Docker
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3  # Cette étape clone votre dépôt

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2  # Permet d'utiliser Docker Buildx pour créer l'image

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ mgdev220 }}  # Utilisation du secret Docker Hub pour l'utilisateur
        password: ${{ Magloire14 }}  # Utilisation du secret Docker Hub pour le mot de passe

    - name: Build Docker image
      run: |
        docker build -t mgdev220/php-app:latest .  # Remplacez 'my-app' par le nom de votre image
        docker push mgdev220/php-app:latest  # Push de l'image vers Docker Hub

  # Job pour déployer sur Kubernetes
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ce job dépend du job de build (construction de l'image Docker)

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v2  # Configuration de kubectl pour interagir avec Kubernetes
      with:
        version: 'v1.23.0'

    - name: Set up Kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG }}" > kubeconfig  # Stocke la config Kubernetes dans un fichier temporaire
        export KUBECONFIG=kubeconfig

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f kubernetes/Deployment.yaml  # Applique le fichier de déploiement Kubernetes
        kubectl apply -f kubernetes/Service.yaml     # Applique le fichier de service Kubernetes

    - name: Wait for Deployment to be ready
      run: |
        kubectl rollout status deployment/my-app  # Attendez que le déploiement soit terminé
